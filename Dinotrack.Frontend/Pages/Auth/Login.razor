@page "/Login"

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

<div class="row">
    <div class="col-md-12">

        <EditForm Model="loginDTO" OnValidSubmit="LoginAsync">
            <DataAnnotationsValidator />

            <div class="card bg-light">
                <div class="card-header justify-content-center">
                    <span>
                        <i class="oi oi-account-login" /> Iniciar Sesión
                    </span>
                </div>
                <div class="card-body">

                    <div class="mb-2">
                        <label>Email:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@loginDTO.Email" />
                            <ValidationMessage For="@(() => loginDTO.Email)" />
                        </div>
                    </div>
                    <div class="mb-2">
                        <label>Contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@loginDTO.Password" />
                            <ValidationMessage For="@(() => loginDTO.Password)" />
                        </div>
                    </div>
                    <button class="btn btn-sm btn-primary float-end" @onclick=@(() => LoginAsync())><i class="oi oi-check" /> Iniciar Sesión</button>
                    <button class="btn btn-sm mx-1 btn-danger float-end" @onclick=@(() => CloseModalAsync())><i class="oi oi-ban" /> Cancelar</button>
                </div>
                <div class="card-footer">
                    <p><a class="btn-sm btn-link" href="/Register">¿No eres usuario aún? Resgitrate aquí</a></p>
                    <p><a class="btn-sm btn-link" href="/RecoverPassword">¿Has olvidado tu contraseña?</a></p>
                    <a class="btn-sm btn-link" href="/ResendToken">Reenviar correo de activación de cuenta</a>
                </div>
            </div>
        </EditForm>
    </div>
</div>
@code {
    private LoginDTO loginDTO = new();
    private bool wasClose;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task LoginAsync()
    {
        if (wasClose)
        {
            navigationManager.NavigateTo("/");
            return;
        }

        var responseHttp = await repository.PostAsync<LoginDTO, TokenDTO>("/api/accounts/Login", loginDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            if (message!.Contains("El usuario no ha sido habilitado"))
            {
                var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                    {
                        Title = "Confirmación",
                        Text = $"El usuario no ha sido habilitado, debes de seguir las instrucciones del correo enviado para poder habilitar el usuario.",
                        Icon = SweetAlertIcon.Question,
                        ShowCancelButton = true,
                        CancelButtonText = "Cerrar",
                        ConfirmButtonText = "Re-enviar correo de confirmación"
                    });
                var confirm = string.IsNullOrEmpty(result.Value);
                if (!confirm)
                {
                    navigationManager.NavigateTo("/ResendToken");
                }
            }
            else
            {
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            }         
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }

    private async Task CloseModalAsync()
    {
        wasClose = true;
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }

}
