@page "/users"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (Users is null)
{
    <Loading />
}
else
{


    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-people"></i> Usuarios
                <a class="btn btn-sm btn-primary float-end" href="/register/?IsAdmin=true"><i class="oi oi-plus"></i> Adicionar Administrador</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar usuario..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                </div>
            </div>
            <GenericList MyList="Users">
                <Body>
                    <Pagination CurrentPage="currentPage"
                                TotalPages="totalPages"
                                SelectedPage="SelectedPageAsync" />
                    <div style="display: flex; justify-content: flex-end; align-items: center;">
                        <span style="margin-right: 10px;">Registros por página</span>
                        <select class="form-select" style="width:80px" @onchange="UserChangedAsync">
                            <option value="10">10</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                    </div>

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Imagen</th>
                                <th>Usuario</th>
                                <th>Documento</th>
                                <th>Teléfono</th>
                                <th>Email</th>
                                <th>Dirección</th>
                                <th>Confirmado</th>
                                <th>Tipo Usuario</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Users)
                            {
                                <tr>
                                    <td><img src="@user.Photo" width="80" height="80" style="border-radius:50%" /></td>
                                    <td>@user.FullName</td>
                                    <td>@user.Document</td>
                                    <td>@user.PhoneNumber</td>
                                    <td>@user.Email</td>
                                    <td>@user.Address, @user.City!.Name</td>
                                    <td>@user.EmailConfirmed</td>
                                    <td>@EnumHelper.GetEnumDescription(user.UserType)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>
            
}

@code {
    public List<User>? Users { get; set; }
    public string? Error { get; set; }
    private int currentPage = 1;
    private int totalPages;
    private int recNumber = 10;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync((int page, int recNum) parameters)
    {
        currentPage = parameters.page;
        recNumber = parameters.recNum;
        await LoadAsync(parameters.page, parameters.recNum);
    }

    private async Task UserChangedAsync(ChangeEventArgs e)
    {
        recNumber = Convert.ToInt32(e.Value!);
        currentPage = 1;
        await LoadAsync(1, recNumber);
    }

    private async Task LoadAsync(int page = 1, int recNum = 10)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/accounts/all?page={page}";
            url2 = $"api/accounts/totalPages?recordsNumber={recNumber}";
        }
        else
        {
            url1 = $"api/accounts/all?page={page}&filter={Filter}";
            url2 = $"api/accounts/totalPages?filter={Filter}&recordsNumber={recNumber}";
        }

        try
        {
            var responseHppt = await repository.GetAsync<List<User>>(url1);
            var responseHppt2 = await repository.GetAsync<int>(url2);
            Users = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync();
        await SelectedPageAsync((page, recNumber));
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await LoadAsync();
    }
}
