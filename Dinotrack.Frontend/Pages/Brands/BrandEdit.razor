@page "/brands/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<hr/>
<h3>Editar Marca</h3>

@if (brand is null)
{
    <Loading />
}
else
{
    <BrandForm @ref="brandForm" Brand="brand" OnValidSubmit="SaveAsync" ReturnAction="Return" />
}

@code {
    private Brand? brand;
    private BrandForm? brandForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await repository.GetAsync<Brand>($"api/brands/{Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        brand = response.Response;
    }

    private async Task SaveAsync()
    {
        var response = await repository.PutAsync($"/api/brands", brand);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Return();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 2000,
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Marca modificada exitosamente");
    }
    private void Return()
    {
        brandForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/brands");
    }
}
