@page "/brands"
@inject IRepository repository;
@inject SweetAlertService sweetAlertService;

<hr/>
<h3>Marcas</h3>
<hr />
<div class="d-grid gap-2 d-md-block">
    <a class="btn btn-primary" role="button" href="/brands/create">Nueva Marca</a>
</div>


<GenericList MyList="brands">
    <Body>
        <table class="table table-striped">

            <thead>
                <tr>
                    <th>Marcas</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var brand in brands!)
                {
                    <tr>
                        <td>
                            <a href="/brands/details/@brand.Id">@brand.Name</a>
                        </td>
                        <td>
                            <a class="btn btn-warning btn-sm" href="/brands/edit/@brand.Id">Editar</a>
                            <button class="btn btn-sm btn-danger" @onclick=@(() => DeleteAsync(brand))>Borrar</button>
                        </td>

                    </tr>
                }
            </tbody>
        </table>

    </Body>

</GenericList>



@code {

    public List<Brand>? brands { get; set; }
    public string? Error { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadRecordsAsync();
    }

    private async Task LoadRecordsAsync()
    {
        var response = await repository.GetAsync<List<Brand>>("/api/brands");
        if (response.Error)
        {
            Error = await response.GetErrorMessageAsync();
            return;
        }
        brands = response.Response;

    }
    private async Task DeleteAsync(Brand brand)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres eliminar la marca {brand.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var response = await repository.DeleteAsync($"api/brands/{brand.Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadRecordsAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 2000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Marca eliminada exitosamente.");
    }
}
