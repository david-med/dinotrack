@page "/brands/details/{BrandId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (brand is null)
{
    <Loading />
}
else
{
    <h3>@brand.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary" href="/refs/create/@brand.Id">Nueva Referencia</a>
        <a class="btn btn-success" href="/brands">Regresar</a>
    </div>

    <h4>Marcas</h4>
    <GenericList MyList="brand!.Refs!.ToList()">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Referencia</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var refe in brand.Refs!)
                    {
                        <tr>
                            <td>
                                @refe.Name
                            </td>
                            <td>
                                <a class="btn btn-warning btn-sm" href="/refs/edit/@refe.Id">Editar</a>
                                <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(refe))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    private Brand? brand;

    [Parameter]
    public int BrandId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<Brand>($"/api/brands/{BrandId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/brands");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        brand = responseHttp.Response;
    }

    private async Task DeleteAsync(Ref refe)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Realmente deseas eliminar la marca {refe.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"/api/refs/{refe.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 2000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");
    }
}