@page "/states/create/{CountryId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Crear Nuevo Estado</h3>

<StateForm @ref="stateForm" State="state" OnValidSubmit="CreateAsync" ReturnAction="Return" />

@code {
    private State state = new();
    private StateForm? stateForm;
    private Country country = new();

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int CountryId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await repository.GetAsync<Country>($"/api/countries/{CountryId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                Return();
            }
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        country = response.Response!;
    }

    private async Task CreateAsync()
    {
        state.CountryId = CountryId;
        var response = await repository.PostAsync("/api/states", state);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 2000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Estado creado exitosamente.");
    }

    private void Return()
    {
        stateForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/countries/details/{CountryId}");
    }
}
