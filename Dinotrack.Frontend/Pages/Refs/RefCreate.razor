@page "/refs/create/{BrandId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h6>Marca: @brand.Name</h6>
<hr/>
<h3>Crear Referencia</h3>

<RefForm @ref="refForm" Ref="refe" OnValidSubmit="CreateAsync" ReturnAction="Return" />

@code {
    private Ref refe = new();
    private RefForm? refForm;

    [Parameter]
    public int BrandId { get; set; }
    public Brand brand = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await repository.GetAsync<Brand>($"/api/brands/{BrandId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                Return();
            }
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        brand = response.Response!;
    }

    private async Task CreateAsync()
    {
        refe.BrandId = BrandId;
        var response = await repository.PostAsync("/api/refs", refe);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Return();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 2000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Referencia creada con éxito.");
    }

    private void Return()
    {
        refForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/brands/details/{BrandId}");
    }
}
