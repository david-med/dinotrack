@page "/refs/create/{BrandId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (loading)
{
    <Loading/>
}
else
{
    <h3>Crear Referencia</h3>
    <RefForm @ref="refForm" RefDTO="refDTO" OnValidSubmit="CreateAsync" ReturnAction="Return" />
}
@code {
    private RefDTO refDTO = new RefDTO
    {
        RefImages = new List<String>()
    };
    private RefForm? refForm;
    private bool loading = true;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int BrandId { get; set; }
    public Brand brand = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await repository.GetAsync<Brand>($"/api/brands/{BrandId}");
        loading = false;
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                Return();
            }
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        brand = response.Response!;
    }

    private async Task CreateAsync()
    {
        refDTO.BrandId = BrandId;

        var response = await repository.PostAsync("/api/refs/full", refDTO);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 2000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Referencia creada con éxito.");
    }

    private void Return()
    {
        refForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/brands/details/{BrandId}");
    }
}
