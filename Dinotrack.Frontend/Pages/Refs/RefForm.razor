@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigationAsync"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-6">
            <div class="mb-3">
                <label>Referencia</label>
                <div>
                    <InputText class="form-control" @bind-Value="@RefDTO.Name" />
                    <ValidationMessage For="@(() => RefDTO.Name)" />
                </div>
                <label>Descripción</label>
                <div>
                    <InputText class="form-control" @bind-Value="@RefDTO.Description" />
                    <ValidationMessage For="@(() => RefDTO.Description)" />
                </div>
                <label>Referencia</label>
                <div>
                    <InputNumber class="form-control" @bind-Value="@RefDTO.Model" />
                    <ValidationMessage For="@(() => RefDTO.Model)" />
                </div>
            </div>
        </div>
        <div class="col-6">
            <div class="mb-3">
                <div>
                    <InputImg Label="Imagen" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                </div>
            </div>
            @if (IsEdit)
            {
                <div class="mb-3">
                    <button type="button" class="btn btn-outline-primary" @onclick="AddImageAction"><i class="oi oi-plus" /> Agregar Imagenes</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="RemoveImageAction"><i class="oi oi-trash" /> Eliminar Imagen</button>
                </div>
            }

        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@if (IsEdit && RefDTO.RefImages is not null)
{
    <CarouselView Images="RefDTO.RefImages" />
}

@code {
    private EditContext editContext = null!;
    private string? imageUrl;


    [Parameter]
    public bool IsEdit { get; set; } = false;

    [EditorRequired]
    [Parameter]
    public RefDTO RefDTO { get; set; } = null!;


    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    [Parameter]
    public EventCallback AddImageAction { get; set; }

    [Parameter]
    public EventCallback RemoveImageAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }


    protected override void OnInitialized()
    {
        editContext = new(RefDTO);
        RefDTO.Model = DateTime.Now.Year;
    }

    private void ImageSelected(string imagenBase64)
    {
        if (RefDTO.RefImages is null)
        {
            RefDTO.RefImages = new List<String>();
        }
        RefDTO.RefImages!.Add(imagenBase64);
        imageUrl = null;
    }

    private async Task OnBeforeInternalNavigationAsync(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}
