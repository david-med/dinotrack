@page "/refs/edit/{RefId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<hr />
<h3>Editar Referencia</h3>

@if (refe is null)
{
    <Loading />
}
else
{
    <RefForm @ref="refForm" Ref="refe" OnValidSubmit="SaveAsync" ReturnAction="Return" />
}

@code {
    private Ref? refe;
    private RefForm? refForm;

    [Parameter]
    public int RefId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var response = await repository.GetAsync<Ref>($"/api/refs/{RefId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                Return();
            }
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        refe = response.Response;
    }

    private async Task SaveAsync()
    {
        var response = await repository.PutAsync($"/api/refs", refe);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Return();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 2000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");
    }

    private void Return()
    {
        refForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/brands/details/{refe!.BrandId}");
    }
}
