@page "/refs/edit/{RefId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Referencia</h3>

@if (loading)
{
    <Loading />
}
else
{
    <RefForm @ref="refForm" RefDTO="refDTO" OnValidSubmit="SaveAsync" ReturnAction="Return" IsEdit=true
             AddImageAction="AddImageAsync" RemoveImageAction="RemoveImageAsyc" />
}

@code {
    private RefDTO refDTO = new RefDTO
    {
        RefImages = new List<String>()
    };
    private RefForm? refForm;
    private bool loading = true;
    private Ref? refe;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int RefId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var response = await repository.GetAsync<Ref>($"/api/refs/{RefId}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                Return();
            }
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        refe = response.Response!;
        refDTO = ToRefDTO(refe);
        loading = false;

    }

    private async Task AddImageAsync()
    {
        if (refDTO.RefImages is null || refDTO.RefImages.Count == 0)
        {
            return;
        }

        var imageDTO = new ImageDTO
            {
                RefId = RefId,
                Images = refDTO.RefImages!
            };

        var response = await repository.PostAsync<ImageDTO, ImageDTO>("/api/refs/addImages", imageDTO);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        refDTO.RefImages = response.Response!.Images;
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 5000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Imagenes agregadas con éxito.");
    }

    private async Task RemoveImageAsyc()
    {
        if (refDTO.RefImages is null || refDTO.RefImages.Count == 0)
        {
            return;
        }

        var imageDTO = new ImageDTO
            {
                RefId = RefId,
                Images = refDTO.RefImages!
            };

        var response = await repository.PostAsync<ImageDTO, ImageDTO>("/api/refs/removeImage", imageDTO);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        refDTO.RefImages = response.Response!.Images;
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 5000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Imagén eliminada con éxito.");
    }

    private RefDTO ToRefDTO(Ref refe)
    {
        return new RefDTO
            {
                Description = refe.Description,
                Id = refe.Id,
                Name = refe.Name,
                Model = refe.Model,
                BrandId = refe.BrandId,
                RefImages = refe.RefImages!.Select(x => x.Image).ToList()
            };
    }

    private async Task SaveAsync()
    {
        var response = await repository.PutAsync($"/api/refs/full", refDTO);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 2000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");
    }

    private void Return()
    {
        refForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/brands/details/{refe!.BrandId}");
    }
}
