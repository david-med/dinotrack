@page "/workshops/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<hr />
<h3>Editar Taller</h3>

@if (workshop is null)
{
    <Loading />
}
else
{
    <WorkshopForm @ref="workshopForm" Workshop="workshop" OnValidSubmit="SaveAsync" ReturnAction="Return" />
}

@code {
    private Workshop? workshop;
    private WorkshopForm? workshopForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await repository.GetAsync<Workshop>($"api/workshops/{Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        workshop = response.Response;
    }

    private async Task SaveAsync()
    {
        var response = await repository.PutAsync($"/api/workshops", workshop);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Return();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 2000,
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Taller modificado exitosamente");
    }
    private void Return()
    {
        workshopForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/workshops");
    }
}
