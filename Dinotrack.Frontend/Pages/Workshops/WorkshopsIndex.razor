@page "/workshops"
@inject IRepository repository;
@inject SweetAlertService sweetAlertService;
@attribute [Authorize(Roles = "Admin")]


<div class="card">
    <div class="card-header">
        <span>
            <i class="oi oi-wrench"></i> Talleres
        </span>
        <div class="float-end">
            <a class="btn btn-sm btn-primary" role="button" @onclick=@(() => ShowModalAsync())><i class="oi oi-plus"></i> Nuevo Taller</a>
        </div>
    </div>
    <div class="card-body">
        <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
            <div>
                <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar taller..." @bind-value="Filter" />
            </div>
            <div class="mx-1">
                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
            </div>
        </div>

        <GenericList MyList="workshops">
            <Body>
                <Pagination CurrentPage="currentPage"
                            TotalPages="totalPages"
                            RecNumber="recNumber"
                            SelectedPage="SelectedPageAsync" />
                <div style="display: flex; justify-content: flex-end; align-items: center;">
                    <span style="margin-right: 10px;">Registros por página</span>
                    <select class="form-select" style="width:80px" @onchange="WorkshopChangedAsync">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Taller</th>
                            <th style="width:168px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var workshop in workshops!)
                        {
                            <tr>
                                <td>@workshop.Name</td>
                                <td>
                                    <a class="btn btn-warning btn-sm" @onclick=@(() => ShowModalAsync(workshop.Id, true))><i class="oi oi-layers" /> Editar</a>
                                    <button class="btn btn-sm btn-danger" @onclick=@(() => DeleteAsync(workshop))><i class="oi oi-ban" /> Borrar</button>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>

            </Body>

        </GenericList>
    </div>
</div>


@code {

    public List<Workshop>? workshops { get; set; }
    public string? Error { get; set; }
    private int currentPage = 1;
    private int totalPages;
    private int recNumber = 10;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        await LoadRecordsAsync();
    }

    private async Task ShowModalAsync(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<WorkshopEdit>(string.Empty, new ModalParameters().Add("Id", id));
        }
        else
        {
            modalReference = Modal.Show<WorkshopCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadRecordsAsync();
        }
    }


    private async Task SelectedPageAsync((int page, int recNum) parameters)
    {
        currentPage = parameters.page;
        recNumber = parameters.recNum;
        await LoadRecordsAsync(parameters.page, parameters.recNum);
    }

    private async Task WorkshopChangedAsync(ChangeEventArgs e)
    {
        recNumber = Convert.ToInt32(e.Value!);
        currentPage = 1;
        await LoadRecordsAsync(1, recNumber);
    }

    private async Task LoadRecordsAsync(int page = 1, int recNumber = 10)
    {
        if (!string.IsNullOrEmpty(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var ok = await LoadListAsync(page, recNumber);
        if (ok)
        {
            await LoadPagesAsync(recNumber);
        }

    }

    private async Task LoadPagesAsync(int recNumber = 10)
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/workshops/totalPages?recordsNumber={recNumber}";
        }
        else
        {
            url = $"api/workshops/totalPages?recordsNumber={recNumber}&filter={Filter}";
        }

        var response = await repository.GetAsync<int>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        totalPages = response.Response;
    }

    private async Task<bool> LoadListAsync(int page, int recNumber)
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/workshops?page={page}&recordsNumber={recNumber}";
        }
        else
        {
            url = $"api/workshops?page={page}&recordsNumber={recNumber}&filter={Filter}";
        }

        var response = await repository.GetAsync<List<Workshop>>(url);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return false;
        }
        workshops = response.Response;
        return true;
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadRecordsAsync(page, recNumber);
        await SelectedPageAsync((page, recNumber));
    }

    private async Task DeleteAsync(Workshop workshop)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = $"¿Esta seguro que quieres eliminar el taller {workshop.Name}?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var response = await repository.DeleteAsync($"api/workshops/{workshop.Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadRecordsAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 2000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Taller eliminado exitosamente.");
    }
}
