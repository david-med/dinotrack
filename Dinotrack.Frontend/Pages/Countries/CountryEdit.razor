@page "/countries/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<h3>Editar País</h3>

@if (country is null)
{
    <Loading />
}
else
{
    <CountryForm @ref="countryForm" Country="country" OnValidSubmit="SaveAsync" ReturnAction="Return" />
}

@code {
    private Country? country;
    private CountryForm? countryForm;
    
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;


    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await repository.GetAsync<Country>($"api/countries/{Id}");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        country = response.Response;
    }

    private async Task SaveAsync()
    {
        var response = await repository.PutAsync($"/api/countries", country);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();
        
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopRight,
                ShowConfirmButton = false,
                Timer = 2000,
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "País modificado exitosamente");
    }
    private void Return()
    {
        countryForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/countries");
    }
}
